#!/usr/bin/expect


# 帮助信息：开始

set helpText {
# 简介
sshcp 命令使您可以通过一个简短的命令就实现如下功能：
* 把本地指定目录或文件 上传到 服务器的指定的目标目录中，上传之前也可配置是否要清空服务器的目标目录；
* 自动登录服务器，并转到指定的目标目录中；

主页：<https://github.com/GuoBinyong/sshcp>

# 语法
```
sshcp [-tp|--type type] [-c|--conf conf] [-pw|--password password] [-h|--host host] [-p|--prot prot] [-s|--sour sour] [-t|--targ targ] [-d|--dele dele] [-pmt|--prompt prompt]
```

# 选项

sshcp 命令支持以下选项

* -tp|--type  : 配置文件的类型，指定该参数，会优先匹配带有以该类型作为中缀名的配置文件；
* -c|--conf  : 配置文件的路径
* -n|--name  : ssh登录时的用户名
* -pw|--password  : 用户名对应的密码
* -h|--host : 服务器的地址
* -p|--prot : 服务器的端口
* -s|--sour  : 源目录；
   * 如果没有给该参数配置有效的值，则会进入交互模式，即：登录服务器并跳转到目标目录后，自动将控制权交给用户；
   * 如果该参数的值是以 / 结尾的目录路径，则会将该目录下的所有文件 和 文件夹 都上传到服务器的目标目录下；
   * 如果该参数的值不是以 / 结尾的 目录或文件，则会将 该目录 或 文件 上传到服务器的目标目录下；
* -t|--targ  : 服器上的目标目录
* -d|--dele : 在上传sour目录中的文件之前，是否删除 targ 目录中的所有文件； 0 : 不删除；1 : 删除； 默认值: 1 ;
* -help|--help|help  : 输出 sshcp 命令的帮助信息
* -pmt|--prompt  : 能匹配服务器的命令行提示符的字符串 或 正则表达式； 默认值：\S，即表示：包含非空字符的字符串；
   * 该参数只有在交互模式下才有效；
   * 该参数有助于精准识别 ssh 登录成功；
   * 由于该参数保存的是正则表达式，所以为了避免 tcl 正则的特殊字符 当作 tcl 的特殊字符去展开，建义在使用配置文件配置该参数时，将配置的正则表达式用 花括号 {} 包裹着；



# 配置文件
配置文件是作为 tcl 脚本被优先执行的，所以配置文件中可以书写 tcl 代码来实现更加细粒度的控制和配置；

配置文件的全名（完整名称）由三部分组成：配置文件名、中缀名、后缀名，由 点 `.` 分隔，格式如下：
```
配置文件名.type.tcl
```
- 配置文件名 是 由 `-c|--conf` 选项指定的文件名
- 中缀名 是 由 `-tp|--type` 选项指定的类型字符串
- 后缀名 是 `tcl`
- 中缀名 和 后缀名 是 可选的；


## 配置文件可存放在两个地方
- 用户级配置文件：存放在~/.sshcp/ 目录下，文件前缀名为 sshcprc；
- 项目级配置文件：存放在当前目录下，文件的前缀名为 conf 选项和变量设置的字符串，如果没有配置conf选项和变量，则默认的前缀名为 `sshcprc`；

## 配置文件可分为两类
- 私有配置文件：带有由 type 选项和变量指定的字符串作为中缀名的配置文件；该配置文件，只有设置了 type 选项或变量时，才会被加载
- 公共配置文件：不带有由 type 选项和变量指定的字符串作为中缀名的配置文件；该配置文件只要存在，就会被加载；

## 配置文件的加载顺序和优先级
选项和变量配置文件的加载顺序和优先级如下（优先级从底到高排列）:
1. 用户级的公共配置文件: ~/.sshcp/sshcprc[.tcl]
2. 用户级的私有配置文件：~/.sshcp/sshcprc.<type>[.tcl]
3. 项目级的公共配置文件: <PWD>/<conf>[.tcl]
4. 项目级的私有配置文件: <PWD>/<conf>.<type>[.tcl]
5. 命令行选项

**备注：** 
- 尖括号 `<>` 表示取相应变量的值
- 方括号 `[]` 表示是可选的


## 配置文件查找规则
脚本会按照下面的顺序查找配置文件，如果找到，就会加载该配置文件并停止查找：
1. 查找带相应的带 `tcl` 后缀名的配置文件；
2. 查找不相应的不带 `tcl` 后缀名的配置文件；

脚本会先查找带 `tcl` 后缀名的配置文件，如果找到了，则会加载带 `tcl` 后缀名的配置文件，并且会忽略相应的不带 `tcl` 后缀名的配置文件；如果没有找到，则会继续查找不带 `tcl` 后缀名的配置文件；


# 可配置变量

配置文件中可设置的变量及其语法示例如下

**注意：以下所有配置字段的值均是字符串，字符串可以用双引号 " 或 花括号 {} 包裹着，也可以不用包裹，当字符串中包含空格等能引起不达预期效果的字符时，可以通过将该字符串包裹在 双引号 或 花括号 {} 中来解决这类问题**

## type
配置文件的类型 该类型会作为配置文件的中缀名；
```
set type "dev"
```

## conf
配置文件的路径
```
set conf "sshcprc"
```

## name
ssh登录时的用户名
```
set name "keyanzhe"
```

## password
用户名对应的密码
```
set password "123456789"
```

## host
服务器的地址
```
set host "192.168.90.33"
```

## prot
服务器的端口
```
set prot "9033"
```

## sour
源目录；
* 如果没有给该参数配置有效的值，则会进入交互模式，即：登录服务器并跳转到目标目录后，自动将控制权交给用户；
* 如果该参数的值是以 / 结尾的目录路径，则会将该目录下的所有文件 和 文件夹 都上传到服务器的目标目录下；
* 如果该参数的值不是以 / 结尾的 目录或文件，则会将 该目录 或 文件 上传到服务器的目标目录下；
```
set sour "dist/"
```

## targ
服器上的目标目录
```
set targ "/data/mc/website/guo.binyong.com/www/webapp"
```

## dele
在上传sour目录中的文件之前，是否删除 targ 目录中的所有文件； 0 : 不删除；1 : 删除； 默认值: 1 ;
```
set dele 1
```

## prompt
能匹配服务器的命令行提示符的字符串 或 正则表达式； 默认值：\S，即表示：包含非空字符的字符串；
* 该参数只有在交互模式下才有效；
* 该参数有助于精准识别 ssh 登录成功；
* 由于该参数保存的是正则表达式，所以为了避免 tcl 正则的特殊字符 当作 tcl 的特殊字符去展开，建义在使用配置文件配置该参数时，将配置的正则表达式用 花括号 {} 包裹着；
```
set prompt {\S}
```
}
# 帮助信息：结束




# 解析 help
set helpIndex [lsearch -regexp  $argv "-help|--help|help"]
if {$helpIndex != -1} {
	puts $helpText
	exit
}




# 程序使用的变量：开始
set empStrReg {^\s*$} ; # 空字符串的正则
set notEmpStrReg {\S} ; # 非空字符串的正则
# 程序使用的变量：结束


# 初始化变量：开始
set type ""
set conf "$env(PWD)/sshcprc"
set name ""
set password ""
set host ""
set prot ""
set sour ""
set targ ""
set dele 0
set prompt $notEmpStrReg
# 初始化变量：结束


# 配置变量：开始
set rootPubRc "$env(HOME)/.sshcp/sshcprc" ; # 用户配置文件名
# 配置变量：结束



# 加载配置文件的过程
proc loadConf { path } {
	set isExist 0
	set fullPath "$path.tcl"
	if {[file exists $fullPath]} {
		set isExist 1
	} elseif [file exists $path] {
		set isExist 1
		set fullPath $path
	}


	if $isExist {
		global type conf name password host prot sour targ dele argType argConf

		source $fullPath

		if {[info exists argType]} {
			set type $argType
		}

		if {[info exists argConf]} {
			set conf $argConf
		}

	}

}






# 加载~/.sshcp/sshcprc 文件
loadConf $rootPubRc


# 解析 type
set typeIndex [lsearch -regexp  $argv "-tp|--type"]
if {$typeIndex != -1} {
	incr typeIndex
	set argType [lindex $argv $typeIndex]
	set type $argType
}



# 加载~/.sshcp/ 目录下带type后缀的 sshcprc 文件
if {[string length $type]} {
	set rootRc "$rootPubRc.$type"
	loadConf $rootRc
}





# 解析conf
set confIndex [lsearch -regexp  $argv "-c|--conf"]
if {$confIndex != -1} {
	incr confIndex
	set argConf [lindex $argv $confIndex]
	set conf $argConf
}

loadConf $conf



if {[string length $type]} {
	append conf "." $type
}

loadConf $conf







# 解析参数
foreach {key value} $argv {

	switch $key {
		-n -
		--name { set name $value }
		-pw -
		--password { set password $value }
		-h -
		--host { set host $value }
		-p -
		--prot { set prot $value }
		-s -
		--sour { set sour $value }
		-t -
		--targ { set targ $value }
		-d -
		--dele { set dele $value }
		-pmt -
		--prompt { set prompt $value }
	}
	
}




if [regexp $empStrReg $name] {
	lappend missArgList name
}

set host [string trim $host]
if [regexp $empStrReg $host] {
	lappend missArgList host
}


if {[info exists missArgList]} {
	puts "缺少必须的选项或变量：$missArgList"
	exit
}


# 是否配置端口
set sshProt ""
set scpProt ""
if [regexp $notEmpStrReg $prot] {
	set sshProt "-p $prot"
	set scpProt "-P $prot"
}


# 判断目标目录 targ 是否是非空的
set haveTarg [regexp $notEmpStrReg $targ]


# 处理源目录，如果源目录以 / 结尾，则追加 *
set finalSour $sour
if [regexp {/\s*$} $sour] {
	set finalSour [string trimright $sour]
	set finalSour  "$finalSour*"
}

# 登录服务器，并将交互权交给用户
if [regexp $empStrReg $finalSour] {
	spawn ssh -l $name $sshProt $host
	expect "password:" {send "$password\r"}
	if $haveTarg {
		expect -re $prompt {send "cd $targ\r"}
	}
	interact
	# 交互结束之后，退出，即：取消文件上传操作
	exit;
}


# 删除服务器上的目标目录内的所有文件
if {$haveTarg} {
	set sshCmd "mkdir -p $targ;"
	if $dele {
		append sshCmd "rm -rf  $targ/* ;"
	}
	spawn ssh -l $name $sshProt $host  $sshCmd
	expect "password:" {send "$password\r"}
	expect eof wait
}


# 上传文件
spawn scp $scpProt -r  {*}[glob $finalSour]  "$name@$host:$targ"
expect "password:" {send "$password\r"}
expect eof wait
exit